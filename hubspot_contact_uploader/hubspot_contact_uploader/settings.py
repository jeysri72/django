"""
Django settings for hubspot_contact_uploader project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import json
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-*a6^@y#oel!qr=uzm^@0h+%kf*z1!0c0n(r2s!^@w&o=$h^1)7'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
ALLOWED_HOSTS = ['localhost', '127.0.0.1', '*']

# Path to the services.json file
SERVICES_FILE_PATH = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'services.json')

# Load the JSON data
with open(SERVICES_FILE_PATH) as f:
    services = json.load(f)

# Use the data in your settings
HUBSPOT_ACCESS_TOKEN = services.get("HUBSPOT_ACCESS_TOKEN")
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'contacts_uploader',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'hubspot_contact_uploader.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'hubspot_contact_uploader.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Define the path for the log file directory
# BASE_DIR is typically defined in settings.py, pointing to the project's root directory
LOG_DIR = os.path.join(BASE_DIR, 'logs')

# Create the logs directory if it doesn't exist
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)



# Complete logging dictionary with comments for each component
LOGGING = {
    'version': 1,  # Version of the logging configuration
    'disable_existing_loggers': False,  # Keep Django's default loggers enabled

    'formatters': {  # Define log message formats
        'verbose': {  # Detailed format including level, timestamp, module, and message
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {  # Simplified format for console output
            'format': '{levelname} {message}',
            'style': '{',
        },
    },

    'handlers': {  # Define handlers to send log messages to different outputs
        'file': {  # Handler to write logs to a file
            'level': 'DEBUG',  # Capture DEBUG level and above
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOG_DIR, 'error.log'),  # Log file location
            'formatter': 'verbose',  # Use detailed formatting for log files
        },
        'console': {  # Handler to print logs to the console/terminal
            'level': 'INFO',  # Capture INFO level and above
            'class': 'logging.StreamHandler',
            'formatter': 'simple',  # Use simple formatting for console logs
        },
        'db_file': {  # Separate handler for database-related logs
            'level': 'ERROR',  # Capture only ERROR and above (avoid verbose DB logs)
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOG_DIR, 'db_errors.log'),  # Separate DB error log file
            'formatter': 'verbose',
        },
        'mail_admins': {  # Handler to send critical errors via email
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
        },
    },

    'loggers': {  # Define individual loggers for different components
        'django': {  # Default Django logger for general Django logs
            'handlers': ['console', 'file'],  # Send logs to console and file
            'level': 'DEBUG',  # Capture DEBUG level and above
            'propagate': True,  # Allow logs to propagate to parent loggers
        },
        'django.db.backends': {  # Logger for database-related logs
            'handlers': ['db_file'],  # Send database error logs to a separate file
            'level': 'ERROR',  # Only log errors (to avoid unnecessary query logs)
            'propagate': False,  # Prevent database logs from propagating to other loggers
        },
        'django.request': {  # Logs errors related to HTTP requests (e.g., 404, 500)
            'handlers': ['file', 'mail_admins'],  # Log errors to file and send emails
            'level': 'ERROR',  # Capture only ERROR level logs
            'propagate': False,
        },
        'django.template': {  # Logger for template errors
            'handlers': ['console', 'file'],  # Log template errors to both console and file
            'level': 'WARNING',  # Capture all levels (to catch template issues)
            'propagate': False,
        },
        'django.security': {  # Logs security-related errors (e.g., CSRF, auth errors)
            'handlers': ['file', 'mail_admins'],  # Log to file and send emails
            'level': 'WARNING',  # Capture WARNING level and above
            'propagate': False,
        },
        'django.views': {  # Custom logger for views in your Django app
            'handlers': ['file'],  # Log view-related issues to the main file
            'level': 'DEBUG',  # Capture all logs from views (for detailed view analysis)
            'propagate': False,
        },
        'django.models': {  # Custom logger for model-related logs
            'handlers': ['file'],  # Send model-related errors to the file
            'level': 'ERROR',  # Only log ERROR and above for models
            'propagate': False,
        },
        'django.views': {  # Custom logger for views in your Django app
            'handlers': ['file'],  # Log view-related issues to the main file
            'level': 'DEBUG',  # Capture all logs from views (for detailed view analysis)
            'propagate': False,
        },
        'django.models': {  # Custom logger for model-related logs
            'handlers': ['file'],  # Send model-related errors to the file
            'level': 'ERROR',  # Only log ERROR and above for models
            'propagate': False,
        },
        'student': {  # Student  app logger
            'handlers': ['console', 'file'],  # Output to both console and file
            'level': 'DEBUG',  # Log only errors and above (you can change this to 'DEBUG' or 'INFO')
            'propagate': True,
        },

    },
}
